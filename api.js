import pkg from 'tesseract.js';
const { recognize } = pkg;
import chalk from 'chalk';
import Table from 'cli-table3';
import path from 'path';
import { fileURLToPath } from 'url';
import fs from 'fs';
import sharp from 'sharp';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const cache = new Map();

async function preprocessImage(imagePath) {
  const timestamp = Date.now();
  const outputPath = path.join(__dirname, `preprocessed-slip-${timestamp}.jpg`);

  if (imagePath === outputPath) {
    throw new Error('Input ‡πÅ‡∏•‡∏∞ Output ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô');
  }

  await sharp(imagePath)
    .grayscale()
    .normalize()
    .modulate({ brightness: 1.1 })
    .sharpen() 
    .threshold(128) 
    .toFile(outputPath);
  return outputPath;
}

async function detectQRCode(imagePath) {
  try {
    const metadata = await sharp(imagePath).metadata();
    const stats = await sharp(imagePath).stats();
    
    const complexity = stats.channels.reduce((sum, channel) => sum + channel.entropy, 0) / stats.channels.length;
    
    const blackWhiteRatio = stats.channels[0].mean / 255;
    
    const aspectRatio = metadata.width / metadata.height;
    
    const hasQR = complexity > 7.0 && blackWhiteRatio < 0.6 && aspectRatio > 0.8 && aspectRatio < 1.2;
    
    console.log(chalk.gray(`‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û: ${complexity.toFixed(2)}, ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≤‡∏ß-‡∏î‡∏≥: ${blackWhiteRatio.toFixed(2)}, ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏†‡∏≤‡∏û: ${aspectRatio.toFixed(2)}`));
    
    if (hasQR) {
      console.log(chalk.green('‡∏û‡∏ö‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô QR Code ‡πÉ‡∏ô‡∏†‡∏≤‡∏û'));
      return { found: true, data: null };
    } else {
      console.log(chalk.yellow('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô QR Code ‡πÉ‡∏ô‡∏†‡∏≤‡∏û'));
      return { found: false, data: null };
    }
  } catch (error) {
    console.log(chalk.yellow(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö QR Code: ${error.message}`));
    return { found: false, data: null };
  }
}

async function extractImageMetadata(imagePath) {
  try {
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå
    const stats = fs.statSync(imagePath);
    const fileSize = stats.size;
    const creationTime = stats.birthtime;
    const modificationTime = stats.mtime;
    
    // ‡∏≠‡πà‡∏≤‡∏ô metadata ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ sharp
    const metadata = await sharp(imagePath).metadata();
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    const fileSizeFormatted = formatFileSize(fileSize);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const imageStats = await sharp(imagePath).stats();
    const isEdited = checkIfImageEdited(imageStats);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
    const trustScore = calculateImageTrustScore(metadata, stats, isEdited);
    
    return {
      fileSize: fileSizeFormatted,
      fileSizeBytes: fileSize,
      dimensions: `${metadata.width} x ${metadata.height} ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•`,
      width: metadata.width,
      height: metadata.height,
      format: metadata.format,
      space: metadata.space,
      channels: metadata.channels,
      depth: metadata.depth,
      density: metadata.density,
      hasAlpha: metadata.hasAlpha,
      hasProfile: metadata.hasProfile,
      creationTime: creationTime.toLocaleString('th-TH'),
      modificationTime: modificationTime.toLocaleString('th-TH'),
      exif: metadata.exif ? true : false,
      isEdited: isEdited,
      trustScore: trustScore
    };
  } catch (error) {
    console.error(chalk.red(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô metadata ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ${error.message}`));
    return null;
  }
}

function formatFileSize(bytes) {
  if (bytes < 1024) {
    return bytes + ' bytes';
  } else if (bytes < 1024 * 1024) {
    return (bytes / 1024).toFixed(2) + ' KB';
  } else if (bytes < 1024 * 1024 * 1024) {
    return (bytes / (1024 * 1024)).toFixed(2) + ' MB';
  } else {
    return (bytes / (1024 * 1024 * 1024)).toFixed(2) + ' GB';
  }
}

function checkIfImageEdited(imageStats) {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  // ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏™‡∏µ
  const channels = imageStats.channels;
  let unnaturalDistribution = false;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  for (const channel of channels) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (channel.min === channel.max || channel.entropy < 1.0) {
      unnaturalDistribution = true;
      break;
    }
  }
  
  return unnaturalDistribution;
}

function calculateImageTrustScore(metadata, stats, isEdited) {
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û (0-100)
  let score = 100;
  
  // ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏†‡∏≤‡∏û
  if (isEdited) {
    score -= 30;
  }
  
  // ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EXIF
  if (!metadata.exif) {
    score -= 20;
  }
  
  // ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 100KB)
  if (stats.size < 100 * 1024) {
    score -= 15;
  }
  
  // ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
  if (metadata.width < 500 || metadata.height < 500) {
    score -= 15;
  }
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-100
  return Math.max(0, Math.min(100, score));
}

async function verifySlip(imagePath) {
  console.log(chalk.bgBlue.white.bold(' üìã ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô... '));

  try {
    if (!fs.existsSync(imagePath)) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏™‡∏•‡∏¥‡∏õ');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö metadata ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    const imageMetadata = await extractImageMetadata(imagePath);
    
    const qrResult = await detectQRCode(imagePath);
    
    const preprocessedImagePath = await preprocessImage(imagePath);
    const ocrResult = await processImageWithOCR(preprocessedImagePath);
    const slipData = await analyzeSlipData(ocrResult, qrResult);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° metadata ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    slipData.metadata = imageMetadata;

    displayResult(slipData);

    if (fs.existsSync(preprocessedImagePath)) {
      fs.unlinkSync(preprocessedImagePath);
    }

    return slipData;
  } catch (error) {
    console.error(chalk.bgRed.white.bold(` ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message} `));
    return null;
  }
}

async function processImageWithOCR(imagePath) {
  const { data: { text } } = await recognize(imagePath, 'tha+eng', {
    logger: m => console.log(chalk.gray(JSON.stringify(m))),
    tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,/:;()&@"\'- ‡∏Å‡∏Ç‡∏É‡∏Ñ‡∏Ö‡∏Ü‡∏á‡∏à‡∏â‡∏ä‡∏ã‡∏å‡∏ç‡∏é‡∏è‡∏ê‡∏ë‡∏í‡∏ì‡∏î‡∏ï‡∏ñ‡∏ó‡∏ò‡∏ô‡∏ö‡∏õ‡∏ú‡∏ù‡∏û‡∏ü‡∏†‡∏°‡∏¢‡∏£‡∏•‡∏ß‡∏®‡∏©‡∏™‡∏´‡∏¨‡∏≠‡∏Æ‡∏§‡∏¶‡∏∞‡∏±‡∏≤‡∏≥‡∏¥‡∏µ‡∏∂‡∏∑‡∏∏‡∏π‡πÄ‡πÅ‡πÇ‡πÉ‡πÑ‡πá‡πà‡πâ‡πä‡πã‡πå',
    tessjs_create_pdf: '0',
    tessjs_create_hocr: '0',
    tessjs_create_tsv: '0',
    tessjs_create_box: '0',
    tessjs_create_unlv: '0',
    tessjs_create_osd: '0',
  });
  
  fs.writeFileSync('ocr_result.txt', text);
  console.log(chalk.gray('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏• OCR ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ocr_result.txt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö'));
  
  return text;
}

async function analyzeSlipData(ocrText, qrResult) {
  const bankPatterns = {
    '‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢': /(‡∏Å‡∏™‡∏¥‡∏Å‡∏£|KBANK|K\s*\+|K\s*PLUS|K\s*Bank|kasikorn)/i,
    '‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå': /(SCB|‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå|siam\s*commercial)/i,
    '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û': /(BBL|‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û|bangkok\s*bank)/i,
    '‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢': /(KTB|‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢|krungthai)/i,
    '‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ': /(BAY|‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ|krungsri)/i,
    '‡∏ó‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ò‡∏ô‡∏ä‡∏≤‡∏ï': /(TTB|‡∏ó‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢|‡∏ò‡∏ô‡∏ä‡∏≤‡∏ï|TMB|TBANK)/i,
  };
  
  const datePatterns = [
    /(\d{1,2}\s*[‡∏Å-‡∏Æ]{1,3}\.?\s*\d{2,4})/i,  
    /(\d{1,2}\/\d{1,2}\/\d{2,4})/,           
    /(\d{1,2}\-\d{1,2}\-\d{2,4})/,           
    /(\d{1,2}\s+[a-zA-Z‡∏Å-‡∏Æ]+\.?\s+\d{2,4})/i, 
    /(\d{1,2}\s+w\.g\.\s+\d{2})/i,           
  ];
  
  const amountPatterns = [
    /(\d{1,3}(?:,\d{3})*\.\d{2})/,          
    /‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô\s*(\d{1,3}(?:,\d{3})*\.\d{2})/i, 
    /‡πÄ‡∏á‡∏¥‡∏ô\s*(\d{1,3}(?:,\d{3})*\.\d{2})/i,    
    /(\d+\.\d{2})\s*‡∏ö‡∏≤‡∏ó/i,                  
    /‡∏ö‡∏≤‡∏ó\s*(\d+\.\d{2})/i,                   
    /‡∏à‡πç‡∏≤‡∏ô‡∏ß‡∏ô:?\s*(\d+\.\d{2})/i,              
    /(\d+\.\d{2})/                          
  ];
  
  const promptPayPatterns = [
    /(PromptPay|‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå|‡∏û‡∏£‡∏≠‡∏°‡πÄ‡∏û‡∏¢|‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û|‡∏û‡∏£‡∏≠‡∏°‡πÄ‡∏û|prompt\s*pay)/i,
    /(‡πÄ‡∏•‡∏Ç‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå|‡πÄ‡∏•‡∏Ç‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á\s*‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå)/i
  ];
  
  const accountPatterns = [
    /\b(\d{10})\b/,                          
    /\b(\d{13})\b/,                          
    /\b(\d{3}\-\d{1,2}\-\d{5}\-\d{1,2})\b/,  
    /‡∏ö‡∏±‡∏ç‡∏ä‡∏µ[^\d]*(\d[\d\-]+)/i,               
    /‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ[^\d]*(\d[\d\-]+)/i,         
    /xxx-x-x(\d{4})-x/i,                     
    /(\d{4,})/                               
  ];
  
  console.log(chalk.gray('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OCR:'));
  console.log(chalk.gray('----------------------------'));
  console.log(chalk.gray(ocrText));
  console.log(chalk.gray('----------------------------'));
  
  let bank = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£';
  for (const [bankName, pattern] of Object.entries(bankPatterns)) {
    if (pattern.test(ocrText)) {
      bank = bankName;
      console.log(chalk.green(`‡∏û‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£: ${bankName} (‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ${pattern})`));
      break;
    }
  }
  
  let amount = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô';
  for (const pattern of amountPatterns) {
    const match = ocrText.match(pattern);
    if (match && match[1]) {
      amount = match[1];
      console.log(chalk.green(`‡∏û‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: ${amount} (‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ${pattern})`));
      break;
    }
  }
  
  let date = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà';
  for (const pattern of datePatterns) {
    const match = ocrText.match(pattern);
    if (match && match[1]) {
      date = match[1];
      console.log(chalk.green(`‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${date} (‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ${pattern})`));
      break;
    }
  }
  
  let hasPromptPay = false;
  for (const pattern of promptPayPatterns) {
    if (pattern.test(ocrText)) {
      hasPromptPay = true;
      console.log(chalk.green(`‡∏û‡∏ö PromptPay (‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ${pattern})`));
      break;
    }
  }
  
  let hasAccount = false;
  let accountNumber = null;
  for (const pattern of accountPatterns) {
    const match = ocrText.match(pattern);
    if (match && match[1]) {
      hasAccount = true;
      accountNumber = match[1];
      console.log(chalk.green(`‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: ${accountNumber} (‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ${pattern})`));
      break;
    }
  }
  
  const slipSpecificPatterns = [
    /‡πÇ‡∏≠‡∏ô‡πÄ[‡∏á|‡∏à]‡∏¥‡∏ô‡∏™‡πç‡∏≤‡πÄ‡∏£‡πá‡∏à/i,
    /‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£/i,
    /‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°/i,
    /‡∏à‡πç‡∏≤‡∏ô‡∏ß‡∏ô/i,
    /‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ/i
  ];
  
  let isSlipSpecific = false;
  for (const pattern of slipSpecificPatterns) {
    if (pattern.test(ocrText)) {
      isSlipSpecific = true;
      console.log(chalk.green(`‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏™‡∏•‡∏¥‡∏õ: ${pattern}`));
      break;
    }
  }
  
  const hasQR = qrResult.found || /QR\s*code|‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î|‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏≤‡∏£‡πå/i.test(ocrText);
  

  const isValid = (
    (bank !== '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£' && amount !== '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô') &&
    (hasAccount || hasPromptPay || hasQR || date !== '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' || isSlipSpecific)
  );
  
  const bankSpecificPatterns = {
    '‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢': /‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à|K\s*PLUS|K\s*\+/i,
    '‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå': /SCB\s*EASY|SCB\s*Transaction/i,
    '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û': /Bualuang\s*mBanking|‡∏ö‡∏±‡∏ß‡∏´‡∏•‡∏ß‡∏á\s*‡πÄ‡∏≠‡πá‡∏°‡πÅ‡∏ö‡∏á‡∏Å‡πå‡∏Å‡∏¥‡πâ‡∏á/i
  };
  
  let bankConfidence = 0;
  if (bank !== '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£' && bankSpecificPatterns[bank] && bankSpecificPatterns[bank].test(ocrText)) {
    bankConfidence = 1;
  }
  
  if (accountNumber && accountNumber.length === 4 && /^\d{4}$/.test(accountNumber)) {
    accountNumber = `xxx-x-x${accountNumber}-x`;
  }
  
  return {
    bank,
    amount,
    date,
    hasQR,
    hasPromptPay,
    hasAccount,
    accountNumber: accountNumber || '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
    qrData: qrResult.data,
    isValid,
    bankConfidence,
    timestamp: new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' }),
    ocrText: ocrText
  };
}

function displayResult(slipData) {
  const table = new Table({
    head: [chalk.cyan.bold('‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'), chalk.cyan.bold('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')],
    colWidths: [25, 45],
    chars: {
      'top': '‚ïê',
      'top-mid': '‚ï§',
      'top-left': '‚ïî',
      'top-right': '‚ïó',
      'bottom': '‚ïê',
      'bottom-mid': '‚ïß',
      'bottom-left': '‚ïö',
      'bottom-right': '‚ïù',
      'left': '‚ïë',
      'left-mid': '‚ïü',
      'mid': '‚îÄ',
      'mid-mid': '‚îº',
      'right': '‚ïë',
      'right-mid': '‚ï¢',
      'middle': '‚îÇ'
    },
    style: {
      head: [],
      border: [],
      padding: [1, 1]
    }
  });

  table.push(
    ['‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£', chalk.yellow(slipData.bank)],
    ['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô', chalk.green(slipData.amount)],
    ['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', chalk.blue(slipData.date)],
    ['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', chalk.magenta(slipData.accountNumber)],
    ['‡∏°‡∏µ QR Code', slipData.hasQR ? chalk.green('‚úì ‡πÉ‡∏ä‡πà') : chalk.red('‚úó ‡πÑ‡∏°‡πà‡∏°‡∏µ')],
    ['‡∏°‡∏µ PromptPay', slipData.hasPromptPay ? chalk.green('‚úì ‡πÉ‡∏ä‡πà') : chalk.red('‚úó ‡πÑ‡∏°‡πà‡∏°‡∏µ')],
    ['‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', slipData.hasAccount ? chalk.green('‚úì ‡πÉ‡∏ä‡πà') : chalk.red('‚úó ‡πÑ‡∏°‡πà‡∏°‡∏µ')],
    ['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', slipData.isValid ? chalk.bgGreen.black(' ‡∏™‡∏•‡∏¥‡∏õ‡∏à‡∏£‡∏¥‡∏á ') : chalk.bgRed.white(' ‡∏™‡∏•‡∏¥‡∏õ‡∏õ‡∏•‡∏≠‡∏° ')],
    ['‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠', chalk.gray(slipData.timestamp)],
  );

  if (slipData.qrData) {
    table.push(['‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR Code', chalk.gray(slipData.qrData)]);
  }
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• metadata ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  if (slipData.metadata) {
    table.push(
      ['‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå', chalk.cyan(slipData.metadata.fileSize)],
      ['‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', chalk.cyan(slipData.metadata.dimensions)],
      ['‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå', chalk.cyan(slipData.metadata.format)],
      ['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå', chalk.cyan(slipData.metadata.creationTime)],
      ['‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EXIF', slipData.metadata.exif ? chalk.green('‚úì ‡∏°‡∏µ') : chalk.red('‚úó ‡πÑ‡∏°‡πà‡∏°‡∏µ')],
      ['‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏†‡∏≤‡∏û', slipData.metadata.isEdited ? chalk.red('‚úì ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç') : chalk.green('‚úó ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç')],
      ['‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠', getTrustScoreDisplay(slipData.metadata.trustScore)]
    );
  }

  console.log(table.toString());
  console.log(chalk.bgMagenta.white.bold(` ‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô `));
}

function getTrustScoreDisplay(score) {
  if (score >= 80) {
    return chalk.green(`${score}/100 (‡∏™‡∏π‡∏á)`);
  } else if (score >= 50) {
    return chalk.yellow(`${score}/100 (‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á)`);
  } else {
    return chalk.red(`${score}/100 (‡∏ï‡πà‡∏≥)`);
  }
}

async function trainModel(imagePath, correctData) {
  console.log(chalk.bgYellow.black(' üß† ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà... '));
  
  try {
    const trainingDataPath = path.join(__dirname, 'training_data.json');
    let trainingData = [];
    
    if (fs.existsSync(trainingDataPath)) {
      trainingData = JSON.parse(fs.readFileSync(trainingDataPath, 'utf8'));
    }
    
    const preprocessedImagePath = await preprocessImage(imagePath);
    const ocrResult = await processImageWithOCR(preprocessedImagePath);
    
    trainingData.push({
      ocrText: ocrResult,
      correctData: correctData,
      imagePath: imagePath,
      timestamp: new Date().toISOString()
    });
    
    fs.writeFileSync(trainingDataPath, JSON.stringify(trainingData, null, 2));
    
    if (fs.existsSync(preprocessedImagePath)) {
      fs.unlinkSync(preprocessedImagePath);
    }
    
    console.log(chalk.green(`‚úì ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${trainingData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`));
    return true;
  } catch (error) {
    console.error(chalk.red(`‚úó ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô: ${error.message}`));
    return false;
  }
}

async function verifyAllSlips(directoryPath = 'Slip') {
  console.log(chalk.bgBlue.white.bold(` üìã ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ${directoryPath}... `));
  
  try {
    const fullDirectoryPath = path.join(__dirname, directoryPath);
    
    if (!fs.existsSync(fullDirectoryPath)) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ${directoryPath}`);
    }
    
    const files = fs.readdirSync(fullDirectoryPath);
    
    if (files.length === 0) {
      console.log(chalk.yellow(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ${directoryPath}`));
      return [];
    }
    
    console.log(chalk.blue(`‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${files.length} ‡πÑ‡∏ü‡∏•‡πå`));
    
    const results = [];
    let validCount = 0;
    let invalidCount = 0;
    
    for (const file of files) {
      const filePath = path.join(fullDirectoryPath, file);
      
      // ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
      if (fs.statSync(filePath).isDirectory()) {
        console.log(chalk.gray(`‡∏Ç‡πâ‡∏≤‡∏° ${file} (‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå)`));
        continue;
      }
      
      console.log(chalk.cyan(`\n--- ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ${file} ---`));
      
      try {
        const slipData = await verifySlip(filePath);
        
        if (slipData) {
          results.push({
            filename: file,
            ...slipData
          });
          
          if (slipData.isValid) {
            validCount++;
          } else {
            invalidCount++;
          }
        }
      } catch (error) {
        console.error(chalk.red(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå ${file}: ${error.message}`));
        results.push({
          filename: file,
          error: error.message,
          isValid: false
        });
        invalidCount++;
      }
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    console.log(chalk.bgMagenta.white.bold(`\n üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö `));
    console.log(chalk.green(`‚úì ‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${validCount} ‡πÑ‡∏ü‡∏•‡πå`));
    console.log(chalk.red(`‚úó ‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${invalidCount} ‡πÑ‡∏ü‡∏•‡πå`));
    console.log(chalk.blue(`üìÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${results.length} ‡πÑ‡∏ü‡∏•‡πå`));
    
    return results;
  } catch (error) {
    console.error(chalk.bgRed.white.bold(` ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message} `));
    return [];
  }
}

export { verifySlip, trainModel, verifyAllSlips };